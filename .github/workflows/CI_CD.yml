# This workflow:
# * Builds docker image based on the ./Dockerfile
# * Publishes the built image to the Docker Hub

name: CI_CD

on: [push]

jobs:
  CI:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.update_release_draft.outputs.tag_name }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        name: Build and test
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: artursymanovic/symartsoft:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Update release draft
        id: update_release_draft
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build, test and push image
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: artursymanovic/symartsoft:${{ steps.update_release_draft.outputs.tag_name }}         
  CD:
    needs: [CI]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az container create --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CONTAINER_NAME }} --image artursymanovic/symartsoft:${{needs.CI.outputs.output1}} --dns-name-label symartsoft --ports 80 443 --os-type Linux --assign-identity --restart-policy OnFailure --cpu 1 --memory 1 --environment-variables ASPNETCORE_ENVIRONMENT=Production

